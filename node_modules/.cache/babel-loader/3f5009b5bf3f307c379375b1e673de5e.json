{"ast":null,"code":"import * as Yup from 'yup'; // export const createSchema1=(loginValidations)=>{\n//     let shape ={}\n//     for(let i=0;i<loginValidations.length;i++){\n//         let type = loginValidations[i].type;\n//         let key = loginValidations[i].name;\n//         let label = loginValidations[i].label;\n//         let required = loginValidations[i].required;\n//         let req_msg = loginValidations[i].req_msg;\n//         let err_msg = loginValidations[i].err_msg;\n//         let matches = loginValidations[i].matches;\n//         let min = loginValidations[i].min;\n//         let max = loginValidations[i].max;\n\nexport const createSchema = validations => {\n  let shape = {};\n\n  for (let i = 0; i < validations.length; i++) {\n    let type = validations[i].type;\n    let key = validations[i].name;\n    let label = validations[i].label;\n    let required = validations[i].required;\n    let req_msg = validations[i].req_msg;\n    let err_msg = validations[i].err_msg;\n    let matches = validations[i].matches;\n    let min = validations[i].min;\n    let max = validations[i].max;\n\n    if (type === \"email\") {\n      shape[key] = Yup.string().email(err_msg || \"Please provide a valid email addess\");\n    }\n\n    if (type === \"password\") {\n      shape[key] = Yup.string().required('No password provided.').min(8, 'Password is too short - should be 8 chars minimum.').matches(/[a-zA-Z]/, 'Password can only contain Latin letters.');\n    }\n  }\n\n  return Yup.object().shape(shape);\n};","map":{"version":3,"sources":["/home/ellocent/Downloads/formiklogin/formiklogin/src/Form Components/Fields/loginValidation.js"],"names":["Yup","createSchema","validations","shape","i","length","type","key","name","label","required","req_msg","err_msg","matches","min","max","string","email","object"],"mappings":"AAAA,OAAO,KAAMA,GAAb,MAAsB,KAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAAiB;AACzC,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIE,IAAI,GAAGJ,WAAW,CAACE,CAAD,CAAX,CAAeE,IAA1B;AACA,QAAIC,GAAG,GAAGL,WAAW,CAACE,CAAD,CAAX,CAAeI,IAAzB;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACE,CAAD,CAAX,CAAeK,KAA3B;AACA,QAAIC,QAAQ,GAAGR,WAAW,CAACE,CAAD,CAAX,CAAeM,QAA9B;AACA,QAAIC,OAAO,GAAGT,WAAW,CAACE,CAAD,CAAX,CAAeO,OAA7B;AACA,QAAIC,OAAO,GAAGV,WAAW,CAACE,CAAD,CAAX,CAAeQ,OAA7B;AACA,QAAIC,OAAO,GAAGX,WAAW,CAACE,CAAD,CAAX,CAAeS,OAA7B;AACA,QAAIC,GAAG,GAAGZ,WAAW,CAACE,CAAD,CAAX,CAAeU,GAAzB;AACA,QAAIC,GAAG,GAAGb,WAAW,CAACE,CAAD,CAAX,CAAeW,GAAzB;;AAEE,QAAIT,IAAI,KAAK,OAAb,EAAsB;AAClBH,MAAAA,KAAK,CAACI,GAAD,CAAL,GAAaP,GAAG,CAACgB,MAAJ,GAAaC,KAAb,CACXL,OAAO,IAAI,qCADA,CAAb;AAGD;;AACD,QAAGN,IAAI,KAAG,UAAV,EAAqB;AACjBH,MAAAA,KAAK,CAACI,GAAD,CAAL,GAAWP,GAAG,CAACgB,MAAJ,GAAaN,QAAb,CAAsB,uBAAtB,EACVI,GADU,CACN,CADM,EACH,oDADG,EAEVD,OAFU,CAEF,UAFE,EAEU,0CAFV,CAAX;AAGH;AAIN;;AACD,SAAOb,GAAG,CAACkB,MAAJ,GAAaf,KAAb,CAAmBA,KAAnB,CAAP;AAEH,CA7BM","sourcesContent":["import *  as Yup from 'yup';\n// export const createSchema1=(loginValidations)=>{\n//     let shape ={}\n//     for(let i=0;i<loginValidations.length;i++){\n//         let type = loginValidations[i].type;\n//         let key = loginValidations[i].name;\n//         let label = loginValidations[i].label;\n//         let required = loginValidations[i].required;\n//         let req_msg = loginValidations[i].req_msg;\n//         let err_msg = loginValidations[i].err_msg;\n//         let matches = loginValidations[i].matches;\n//         let min = loginValidations[i].min;\n//         let max = loginValidations[i].max;\n\n\nexport const createSchema = (validations) => {\n    let shape = {};\n    for (let i = 0; i < validations.length; i++) {\n      let type = validations[i].type;\n      let key = validations[i].name;\n      let label = validations[i].label;\n      let required = validations[i].required;\n      let req_msg = validations[i].req_msg;\n      let err_msg = validations[i].err_msg;\n      let matches = validations[i].matches;\n      let min = validations[i].min;\n      let max = validations[i].max;\n\n        if (type === \"email\") {\n            shape[key] = Yup.string().email(\n              err_msg || \"Please provide a valid email addess\"\n            );\n          } \n          if(type===\"password\"){\n              shape[key]=Yup.string().required('No password provided.') \n              .min(8, 'Password is too short - should be 8 chars minimum.')\n              .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\n          }\n\n\n\n    }\n    return Yup.object().shape(shape);\n\n}"]},"metadata":{},"sourceType":"module"}