{"ast":null,"code":"import * as Yup from 'yup';\nexport const createSchema1 = loginValidations => {\n  let shape = {};\n\n  for (let i = 0; i < loginValidations.length; i++) {\n    let type = validations[i].type;\n    let key = validations[i].name;\n    let label = validations[i].label;\n    let required = validations[i].required;\n    let req_msg = validations[i].req_msg;\n    let err_msg = validations[i].err_msg;\n    let matches = validations[i].matches;\n    let min = validations[i].min;\n    let max = validations[i].max;\n\n    if (type === \"email\") {\n      shape[key] = Yup.string().email(err_msg || \"Please provide a valid email addess\");\n    }\n\n    if (type === \"password\") {\n      shape[key] = Yup.string().required('No password provided.').min(8, 'Password is too short - should be 8 chars minimum.').matches(/[a-zA-Z]/, 'Password can only contain Latin letters.');\n    }\n  }\n};","map":{"version":3,"sources":["/home/ellocent/Downloads/formiklogin/formiklogin/src/Form Components/Fields/loginValidation.js"],"names":["Yup","createSchema1","loginValidations","shape","i","length","type","validations","key","name","label","required","req_msg","err_msg","matches","min","max","string","email"],"mappings":"AAAA,OAAO,KAAMA,GAAb,MAAsB,KAAtB;AACA,OAAO,MAAMC,aAAa,GAAEC,gBAAD,IAAoB;AAC3C,MAAIC,KAAK,GAAE,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,gBAAgB,CAACG,MAA/B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,QAAIE,IAAI,GAAGC,WAAW,CAACH,CAAD,CAAX,CAAeE,IAA1B;AACA,QAAIE,GAAG,GAAGD,WAAW,CAACH,CAAD,CAAX,CAAeK,IAAzB;AACA,QAAIC,KAAK,GAAGH,WAAW,CAACH,CAAD,CAAX,CAAeM,KAA3B;AACA,QAAIC,QAAQ,GAAGJ,WAAW,CAACH,CAAD,CAAX,CAAeO,QAA9B;AACA,QAAIC,OAAO,GAAGL,WAAW,CAACH,CAAD,CAAX,CAAeQ,OAA7B;AACA,QAAIC,OAAO,GAAGN,WAAW,CAACH,CAAD,CAAX,CAAeS,OAA7B;AACA,QAAIC,OAAO,GAAGP,WAAW,CAACH,CAAD,CAAX,CAAeU,OAA7B;AACA,QAAIC,GAAG,GAAGR,WAAW,CAACH,CAAD,CAAX,CAAeW,GAAzB;AACA,QAAIC,GAAG,GAAGT,WAAW,CAACH,CAAD,CAAX,CAAeY,GAAzB;;AAEA,QAAIV,IAAI,KAAK,OAAb,EAAsB;AAClBH,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAaR,GAAG,CAACiB,MAAJ,GAAaC,KAAb,CACXL,OAAO,IAAI,qCADA,CAAb;AAGD;;AACD,QAAGP,IAAI,KAAG,UAAV,EAAqB;AACjBH,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAWR,GAAG,CAACiB,MAAJ,GAAaN,QAAb,CAAsB,uBAAtB,EACVI,GADU,CACN,CADM,EACH,oDADG,EAEVD,OAFU,CAEF,UAFE,EAEU,0CAFV,CAAX;AAGH;AAIN;AAEJ,CA5BM","sourcesContent":["import *  as Yup from 'yup';\nexport const createSchema1=(loginValidations)=>{\n    let shape ={}\n    for(let i=0;i<loginValidations.length;i++){\n        let type = validations[i].type;\n        let key = validations[i].name;\n        let label = validations[i].label;\n        let required = validations[i].required;\n        let req_msg = validations[i].req_msg;\n        let err_msg = validations[i].err_msg;\n        let matches = validations[i].matches;\n        let min = validations[i].min;\n        let max = validations[i].max;\n\n        if (type === \"email\") {\n            shape[key] = Yup.string().email(\n              err_msg || \"Please provide a valid email addess\"\n            );\n          } \n          if(type===\"password\"){\n              shape[key]=Yup.string().required('No password provided.') \n              .min(8, 'Password is too short - should be 8 chars minimum.')\n              .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\n          }\n\n\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}