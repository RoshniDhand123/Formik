{"ast":null,"code":"import * as Yup from \"yup\";\nimport moment from \"moment\";\nexport const createSchema = validations => {\n  let shape = {};\n\n  for (let i = 0; i < validations.length; i++) {\n    let type = validations[i].type;\n    let key = validations[i].name;\n    let label = validations[i].label;\n    let required = validations[i].required;\n    let req_msg = validations[i].req_msg;\n    let err_msg = validations[i].err_msg;\n    let matches = validations[i].matches;\n    let min = validations[i].min;\n    let max = validations[i].max;\n\n    if (type === \"email\") {\n      shape[key] = Yup.string().email(err_msg || \"Please provide a valid email addess\");\n    } else if (type === \"name\") {\n      shape[key] = Yup.mixed().test(\"match\", \" Name is required\", function (name) {\n        return name;\n      });\n    }\n\n    if (key === \"cpassword\") {\n      shape[\"cpassword\"] = Yup.mixed().test(\"match\", \"password and re-enter password does not match\", function (password) {\n        return password === this.parent.password;\n      });\n    }\n  }\n\n  return Yup.object().shape(shape);\n};","map":{"version":3,"sources":["/home/ellocent/Downloads/formiklogin/formiklogin/src/Form Components/validations.js"],"names":["Yup","moment","createSchema","validations","shape","i","length","type","key","name","label","required","req_msg","err_msg","matches","min","max","string","email","mixed","test","password","parent","object"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAAiB;AAC3C,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIE,IAAI,GAAGJ,WAAW,CAACE,CAAD,CAAX,CAAeE,IAA1B;AACA,QAAIC,GAAG,GAAGL,WAAW,CAACE,CAAD,CAAX,CAAeI,IAAzB;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACE,CAAD,CAAX,CAAeK,KAA3B;AACA,QAAIC,QAAQ,GAAGR,WAAW,CAACE,CAAD,CAAX,CAAeM,QAA9B;AACA,QAAIC,OAAO,GAAGT,WAAW,CAACE,CAAD,CAAX,CAAeO,OAA7B;AACA,QAAIC,OAAO,GAAGV,WAAW,CAACE,CAAD,CAAX,CAAeQ,OAA7B;AACA,QAAIC,OAAO,GAAGX,WAAW,CAACE,CAAD,CAAX,CAAeS,OAA7B;AACA,QAAIC,GAAG,GAAGZ,WAAW,CAACE,CAAD,CAAX,CAAeU,GAAzB;AACA,QAAIC,GAAG,GAAGb,WAAW,CAACE,CAAD,CAAX,CAAeW,GAAzB;;AAEA,QAAIT,IAAI,KAAK,OAAb,EAAsB;AACpBH,MAAAA,KAAK,CAACI,GAAD,CAAL,GAAaR,GAAG,CAACiB,MAAJ,GAAaC,KAAb,CACXL,OAAO,IAAI,qCADA,CAAb;AAGD,KAJD,MAMM,IAAIN,IAAI,KAAK,MAAb,EAAqB;AACzBH,MAAAA,KAAK,CAACI,GAAD,CAAL,GAAaR,GAAG,CAACmB,KAAJ,GAAYC,IAAZ,CACX,OADW,EAEX,mBAFW,EAGX,UAAUX,IAAV,EAAgB;AACd,eAAOA,IAAP;AACD,OALU,CAAb;AAOD;;AAED,QAAID,GAAG,KAAK,WAAZ,EAAyB;AACvBJ,MAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBJ,GAAG,CAACmB,KAAJ,GAAYC,IAAZ,CACnB,OADmB,EAEnB,+CAFmB,EAGnB,UAAUC,QAAV,EAAoB;AAClB,eAAOA,QAAQ,KAAK,KAAKC,MAAL,CAAYD,QAAhC;AACD,OALkB,CAArB;AAOD;AACF;;AAED,SAAOrB,GAAG,CAACuB,MAAJ,GAAanB,KAAb,CAAmBA,KAAnB,CAAP;AACD,CAzCM","sourcesContent":["import * as Yup from \"yup\";\nimport moment from \"moment\";\n\nexport const createSchema = (validations) => {\n  let shape = {};\n  for (let i = 0; i < validations.length; i++) {\n    let type = validations[i].type;\n    let key = validations[i].name;\n    let label = validations[i].label;\n    let required = validations[i].required;\n    let req_msg = validations[i].req_msg;\n    let err_msg = validations[i].err_msg;\n    let matches = validations[i].matches;\n    let min = validations[i].min;\n    let max = validations[i].max;\n\n    if (type === \"email\") {\n      shape[key] = Yup.string().email(\n        err_msg || \"Please provide a valid email addess\"\n      );\n    } \n     \n     else if (type === \"name\") {\n      shape[key] = Yup.mixed().test(\n        \"match\",\n        \" Name is required\",\n        function (name) {\n          return name ;\n        }\n      );\n    } \n   \n    if (key === \"cpassword\") {\n      shape[\"cpassword\"] = Yup.mixed().test(\n        \"match\",\n        \"password and re-enter password does not match\",\n        function (password) {\n          return password === this.parent.password;\n        }\n      );\n    }\n  }\n\n  return Yup.object().shape(shape);\n};\n\n"]},"metadata":{},"sourceType":"module"}